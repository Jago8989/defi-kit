import { eth } from "."
import { avatar, member } from "../../../test/wallets"
import { applyPermissions, stealErc20 } from "../../../test/helpers"
import { contracts } from "../../../eth-sdk/config"
import { Status } from "../../../test/types"
import { testKit } from "../../../test/kit"
import { getMainnetSdk } from "@dethcrypto/eth-sdk-client"
import { parseEther, parseUnits } from "ethers/lib/utils"

const B_rETH_STABLE_pid = "0x1e19cf2d73a72ef1332c882f20534b6519be0276000200000000000000000112"
const rETH = "0xae78736Cd615f374D3085123A210448E74Fc6393"
const B_50WETH_50_3pool_pid = "0x08775ccb6674d6bdceb0797c364c2653ed84f3840002000000000000000004f0"
const sdk = getMainnetSdk(avatar)

describe("balancer", () => {
  describe("deposit", () => {
    beforeAll(async () => {
      await applyPermissions(await eth.deposit({ targets: ["B-rETH-STABLE", "50WETH-50-3pool"] }))
    })

    it("only deposit and withdraw from avatar", async () => {
      await sdk.weth.deposit({ value: parseEther("1") })
      await expect(
        testKit.eth.weth.approve(
          contracts.mainnet.balancer.vault,
          parseEther("1")
        )
      ).not.toRevert()

      await expect(
        testKit.eth.balancer.vault.joinPool(
          B_rETH_STABLE_pid,
          avatar._address,
          avatar._address,
          {
            assets: [rETH, contracts.mainnet.weth],
            maxAmountsIn: [0, parseEther("1")],
            userData: "0x000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000de0b6b3a7640000",
            fromInternalBalance: false
          }
        )
      ).not.toRevert()
      // member address not allowed
      await expect(
        testKit.eth.balancer.vault.joinPool(
          B_rETH_STABLE_pid,
          member._address,
          member._address,
          {
            assets: [rETH, contracts.mainnet.weth],
            maxAmountsIn: [0, parseEther("1")],
            userData: "0x000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000de0b6b3a7640000",
            fromInternalBalance: false
          }
        )
      ).toBeForbidden(Status.ParameterNotAllowed)
      // pool id not allowed
      await expect(
        testKit.eth.balancer.vault.joinPool(
          "0x5c6ee304399dbdb9c8ef030ab642b10820db8f56000200000000000000000014",
          avatar._address,
          avatar._address,
          {
            assets: [rETH, contracts.mainnet.weth],
            maxAmountsIn: [0, parseEther("1")],
            userData: "0x000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000de0b6b3a7640000",
            fromInternalBalance: false
          }
        )
      ).toBeForbidden(Status.ParameterNotAllowed)

      await expect(
        testKit.eth.balancer.vault.exitPool(
          B_rETH_STABLE_pid,
          avatar._address,
          avatar._address,
          {
            assets: [rETH, contracts.mainnet.weth],
            minAmountsOut: [0, 0],
            userData: "0x00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001",
            toInternalBalance: false
          }
        )
      ).not.toRevert()
      // member address not allowed
      await expect(
        testKit.eth.balancer.vault.exitPool(
          B_rETH_STABLE_pid,
          member._address,
          member._address,
          {
            assets: [rETH, contracts.mainnet.weth],
            minAmountsOut: [0, 0],
            userData: "0x00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001",
            toInternalBalance: false
          }
        )
      ).toBeForbidden(Status.ParameterNotAllowed)
      // pool id not allowed
      await expect(
        testKit.eth.balancer.vault.exitPool(
          "0x5c6ee304399dbdb9c8ef030ab642b10820db8f56000200000000000000000014",
          avatar._address,
          avatar._address,
          {
            assets: [rETH, contracts.mainnet.weth],
            minAmountsOut: [0, 0],
            userData: "0x00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001",
            toInternalBalance: false
          }
        )
      ).toBeForbidden(Status.ParameterNotAllowed)
    })

    it("only deposit and withdraw from avatar through relayer", async () => {
      await stealErc20(
        contracts.mainnet.usdc,
        parseUnits("1000", 6),
        contracts.mainnet.balancer.vault
      )
      await expect(
        testKit.eth.balancer.vault.setRelayerApproval(
          avatar._address,
          contracts.mainnet.balancer.relayer,
          true
        )
      ).not.toRevert()
      await expect(
        testKit.eth.usdc.approve(
          contracts.mainnet.balancer.vault,
          parseUnits("1000", 6))
      ).not.toRevert()
      await expect(
        testKit.eth.balancer.relayer.multicall(
          ["0x8fe4624f79c58f70905f734641735bc61e45c19dd9ad60bc0000000000000000000004e700000000000000000000000000000000000000000000000000000000000000000000000000000000000000004f2083f5fbede34c2714affb3105539775f7fe64000000000000000000000000fea793aa415061c483d2390414275ad314b3f62100000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000000ba100000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000006b175474e89094c44da98b954eedeac495271d0f00000000000000000000000079c58f70905f734641735bc61e45c19dd9ad60bc000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003b9aca00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003b9aca000000000000000000000000000000000000000000000000000000000000000000", "0x8fe4624f08775ccb6674d6bdceb0797c364c2653ed84f3840002000000000000000004f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fea793aa415061c483d2390414275ad314b3f6210000000000000000000000004f2083f5fbede34c2714affb3105539775f7fe6400000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000000ba10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000079c58f70905f734641735bc61e45c19dd9ad60bc000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000000000000000000002ba10000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002ba100000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000"]
        )
      ).not.toRevert()
    })
  })
})